import { createRef, useEffect, useMemo, useRef, useState } from "react";

import { useTheme } from "@mui/material/styles";

import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import Box from "@mui/material/Box";
import SpeedDial from "@mui/material/SpeedDial";
import SpeedDialAction from "@mui/material/SpeedDialAction";
import ChatIcon from "../src/quicks-icons/ChatIcon.js";
import TaskIcon from "@/src/quicks-icons/TaskIcon.js";
import ZapIcon from "@/src/quicks-icons/Zap.js";
import Inbox from "@/src/components/Inbox.js";

export default function Home() {
  const theme = useTheme();
  const actions = [
    {
      icon: <ChatIcon color={theme.palette.indicator.purple} />,
      name: "Inbox",
      hoverColor: theme.palette.indicator.purple,
    },
    {
      icon: <TaskIcon color={theme.palette.indicator.orange} />,
      name: "Task",
      hoverColor: theme.palette.indicator.orange,
    },
  ];
  const fabRef = useRef(null);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const actionRef = actions.map(() => useRef(null));

  const [open, setOpen] = useState(false);
  const [active, setActive] = useState(null);
  const [initialActionPosition, setInitialActionPosition] = useState(null);
  const [initialFabPosition, setInitialFabPosition] = useState(null);

  const handleOpen = () => {
    if (active) {
      setOpen(false);
      setActive(null);
      handleClickAction();
    } else {
      setOpen(!open);
    }
  };
  const getTranslationAmount = (fromPosition, toPosition) => {
    return fromPosition - toPosition;
  };

  useEffect(() => {
    if (!initialFabPosition) {
      setInitialFabPosition(fabRef.current.getBoundingClientRect().right);
    }
  }, [initialFabPosition]);

  const handleClickAction = (name, index, event) => {
    if (event) event.stopPropagation();
    setActive(name);

    let position = initialActionPosition || [];
    // eslint-disable-next-line react-hooks/rules-of-hooks
    if (!initialActionPosition) {
      actionRef.forEach((ref, i) => {
        position.push(ref.current.getBoundingClientRect().right);
      });

      setInitialActionPosition(position);
    }

    const mainPositionRight = initialFabPosition;

    actionRef.forEach((ref, idx) => {
      if (idx === index) {
        ref.current.style.transform = `translateX(${getTranslationAmount(
          mainPositionRight,
          position[idx]
        )}px)`;
      } else if (index === 0) {
        if (idx > 0) {
          ref.current.style.transform = `translateX(${getTranslationAmount(
            position[idx - 1],
            position[idx]
          )}px)`;
        } else {
          ref.current.style.transform = "";
        }
      } else {
        if (idx > index) {
          ref.current.style.transform = `translateX(${getTranslationAmount(
            position[idx - 1],
            position[idx]
          )}px)`;
        } else {
          ref.current.style.transform = "";
        }
      }
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>pages/index.js</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{" "}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
          <Box sx={{ position: "fixed", bottom: 32, right: 32 }}>
            <Inbox open={active == "Inbox"} />
            <SpeedDial
              direction="left"
              ariaLabel="SpeedDial basic example"
              sx={{
                "& .MuiFab-primary": {
                  transform: active ? "translateX(-15px) !important" : "",
                  backgroundColor: active
                    ? theme.palette.button.grey
                    : theme.palette.button.main,
                  transition: "0.3s all",
                },
              }}
              ref={fabRef}
              icon={<ZapIcon />}
              onClick={() => handleOpen()}
              open={open}
            >
              {actions.map((action, index) => (
                <SpeedDialAction
                  ref={actionRef[index]}
                  key={action.name}
                  icon={action.icon}
                  tooltipTitle={action.name}
                  tooltipPlacement="top"
                  TooltipClasses={{ tooltip: "custom-tooltip" }}
                  FabProps={{ size: "large" }}
                  onClick={(event) =>
                    handleClickAction(action.name, index, event)
                  }
                  sx={{
                    transition: "0.3s all",
                    backgroundColor:
                      active == action.name ? action.hoverColor : "white",
                    "& svg path": {
                      fill: active == action.name ? "white" : action.hoverColor,
                    },
                    "&:hover": {
                      backgroundColor: action.hoverColor,
                      "& svg path": {
                        fill: "white",
                      },
                    },
                  }}
                />
              ))}
            </SpeedDial>
          </Box>
        </div>
      </main>
    </>
  );
}
